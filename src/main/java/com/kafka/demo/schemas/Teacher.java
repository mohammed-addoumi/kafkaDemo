/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.kafka.demo.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** schema for the teacher payload. */
@org.apache.avro.specific.AvroGenerated
public class Teacher extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1713941180074341450L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Teacher\",\"namespace\":\"com.kafka.demo.schemas\",\"doc\":\"schema for the teacher payload.\",\"fields\":[{\"name\":\"identifiant\",\"type\":\"long\",\"doc\":\"Teacher identifiant\"},{\"name\":\"first_name\",\"type\":\"string\",\"doc\":\"the first name of the teacher\"},{\"name\":\"last_name\",\"type\":\"string\",\"doc\":\"The last name of the teacher\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Teacher> ENCODER =
      new BinaryMessageEncoder<Teacher>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Teacher> DECODER =
      new BinaryMessageDecoder<Teacher>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Teacher> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Teacher> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Teacher>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Teacher to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Teacher from a ByteBuffer. */
  public static Teacher fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Teacher identifiant */
  @Deprecated public long identifiant;
  /** the first name of the teacher */
  @Deprecated public java.lang.CharSequence first_name;
  /** The last name of the teacher */
  @Deprecated public java.lang.CharSequence last_name;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Teacher() {}

  /**
   * All-args constructor.
   * @param identifiant Teacher identifiant
   * @param first_name the first name of the teacher
   * @param last_name The last name of the teacher
   */
  public Teacher(java.lang.Long identifiant, java.lang.CharSequence first_name, java.lang.CharSequence last_name) {
    this.identifiant = identifiant;
    this.first_name = first_name;
    this.last_name = last_name;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return identifiant;
    case 1: return first_name;
    case 2: return last_name;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: identifiant = (java.lang.Long)value$; break;
    case 1: first_name = (java.lang.CharSequence)value$; break;
    case 2: last_name = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'identifiant' field.
   * @return Teacher identifiant
   */
  public java.lang.Long getIdentifiant() {
    return identifiant;
  }

  /**
   * Sets the value of the 'identifiant' field.
   * Teacher identifiant
   * @param value the value to set.
   */
  public void setIdentifiant(java.lang.Long value) {
    this.identifiant = value;
  }

  /**
   * Gets the value of the 'first_name' field.
   * @return the first name of the teacher
   */
  public java.lang.CharSequence getFirstName() {
    return first_name;
  }

  /**
   * Sets the value of the 'first_name' field.
   * the first name of the teacher
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.first_name = value;
  }

  /**
   * Gets the value of the 'last_name' field.
   * @return The last name of the teacher
   */
  public java.lang.CharSequence getLastName() {
    return last_name;
  }

  /**
   * Sets the value of the 'last_name' field.
   * The last name of the teacher
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.last_name = value;
  }

  /**
   * Creates a new Teacher RecordBuilder.
   * @return A new Teacher RecordBuilder
   */
  public static com.kafka.demo.schemas.Teacher.Builder newBuilder() {
    return new com.kafka.demo.schemas.Teacher.Builder();
  }

  /**
   * Creates a new Teacher RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Teacher RecordBuilder
   */
  public static com.kafka.demo.schemas.Teacher.Builder newBuilder(com.kafka.demo.schemas.Teacher.Builder other) {
    return new com.kafka.demo.schemas.Teacher.Builder(other);
  }

  /**
   * Creates a new Teacher RecordBuilder by copying an existing Teacher instance.
   * @param other The existing instance to copy.
   * @return A new Teacher RecordBuilder
   */
  public static com.kafka.demo.schemas.Teacher.Builder newBuilder(com.kafka.demo.schemas.Teacher other) {
    return new com.kafka.demo.schemas.Teacher.Builder(other);
  }

  /**
   * RecordBuilder for Teacher instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Teacher>
    implements org.apache.avro.data.RecordBuilder<Teacher> {

    /** Teacher identifiant */
    private long identifiant;
    /** the first name of the teacher */
    private java.lang.CharSequence first_name;
    /** The last name of the teacher */
    private java.lang.CharSequence last_name;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.kafka.demo.schemas.Teacher.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.identifiant)) {
        this.identifiant = data().deepCopy(fields()[0].schema(), other.identifiant);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.first_name)) {
        this.first_name = data().deepCopy(fields()[1].schema(), other.first_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.last_name)) {
        this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Teacher instance
     * @param other The existing instance to copy.
     */
    private Builder(com.kafka.demo.schemas.Teacher other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.identifiant)) {
        this.identifiant = data().deepCopy(fields()[0].schema(), other.identifiant);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.first_name)) {
        this.first_name = data().deepCopy(fields()[1].schema(), other.first_name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.last_name)) {
        this.last_name = data().deepCopy(fields()[2].schema(), other.last_name);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'identifiant' field.
      * Teacher identifiant
      * @return The value.
      */
    public java.lang.Long getIdentifiant() {
      return identifiant;
    }

    /**
      * Sets the value of the 'identifiant' field.
      * Teacher identifiant
      * @param value The value of 'identifiant'.
      * @return This builder.
      */
    public com.kafka.demo.schemas.Teacher.Builder setIdentifiant(long value) {
      validate(fields()[0], value);
      this.identifiant = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'identifiant' field has been set.
      * Teacher identifiant
      * @return True if the 'identifiant' field has been set, false otherwise.
      */
    public boolean hasIdentifiant() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'identifiant' field.
      * Teacher identifiant
      * @return This builder.
      */
    public com.kafka.demo.schemas.Teacher.Builder clearIdentifiant() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'first_name' field.
      * the first name of the teacher
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return first_name;
    }

    /**
      * Sets the value of the 'first_name' field.
      * the first name of the teacher
      * @param value The value of 'first_name'.
      * @return This builder.
      */
    public com.kafka.demo.schemas.Teacher.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.first_name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'first_name' field has been set.
      * the first name of the teacher
      * @return True if the 'first_name' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'first_name' field.
      * the first name of the teacher
      * @return This builder.
      */
    public com.kafka.demo.schemas.Teacher.Builder clearFirstName() {
      first_name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'last_name' field.
      * The last name of the teacher
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return last_name;
    }

    /**
      * Sets the value of the 'last_name' field.
      * The last name of the teacher
      * @param value The value of 'last_name'.
      * @return This builder.
      */
    public com.kafka.demo.schemas.Teacher.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.last_name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'last_name' field has been set.
      * The last name of the teacher
      * @return True if the 'last_name' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'last_name' field.
      * The last name of the teacher
      * @return This builder.
      */
    public com.kafka.demo.schemas.Teacher.Builder clearLastName() {
      last_name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Teacher build() {
      try {
        Teacher record = new Teacher();
        record.identifiant = fieldSetFlags()[0] ? this.identifiant : (java.lang.Long) defaultValue(fields()[0]);
        record.first_name = fieldSetFlags()[1] ? this.first_name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.last_name = fieldSetFlags()[2] ? this.last_name : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Teacher>
    WRITER$ = (org.apache.avro.io.DatumWriter<Teacher>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Teacher>
    READER$ = (org.apache.avro.io.DatumReader<Teacher>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
